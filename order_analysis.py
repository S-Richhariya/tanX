import pandas as pd
import os

# Load the data from the CSV file
def load_data(file_path):
    """
    Load data from a CSV file into a pandas DataFrame.

    Args:
        file_path (str): The path to the CSV file.

    Returns:
        pd.DataFrame: The loaded data.

    Raises:
        FileNotFoundError: If the file is not found at the specified path.
        pd.errors.EmptyDataError: If the file is empty.
        pd.errors.ParserError: If the file cannot be parsed.
    """
    #Using try except block for the erro handling  
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The file at {file_path} does not exist.")
    
    try:
        data = pd.read_csv(file_path)
        return data
    except pd.errors.EmptyDataError:
        print("The file is empty.")
    except pd.errors.ParserError:
        print("Error parsing the file.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# Compute the total revenue for each month
def total_revenue_by_month(df):
    """
    Calculate the total revenue generated by the online store for each month.

    Args:
        df (pd.DataFrame): The data containing orders.

    Returns:
        pd.Series: Total revenue per month.
    """
    df['order_date'] = pd.to_datetime(df['order_date'], errors='coerce')
    df['month'] = df['order_date'].dt.to_period('M')
    df['total_price'] = df['product_price'] * df['quantity']
    return df.groupby('month')['total_price'].sum()

# Compute the total revenue for each product
def total_revenue_by_product(df):
    """
    Calculate the total revenue generated by each product.

    Args:
        df (pd.DataFrame): The data containing orders.

    Returns:
        pd.Series: Total revenue per product.
    """
    df['total_price'] = df['product_price'] * df['quantity']
    return df.groupby('product_name')['total_price'].sum()

# Compute the total revenue for each customer
def total_revenue_by_customer(df):
    """
    Calculate the total revenue generated by each customer.

    Args:
        df (pd.DataFrame): The data containing orders.

    Returns:
        pd.Series: Total revenue per customer.
    """
    df['total_price'] = df['product_price'] * df['quantity']
    return df.groupby('customer_id')['total_price'].sum()

# Identify the top 10 customers by revenue
def top_customers_by_revenue(df, top_n=10):
    """
    Identify the top customers by revenue generated.

    Args:
        df (pd.DataFrame): The data containing orders.
        top_n (int): The number of top customers to return.

    Returns:
        pd.Series: Revenue of the top customers.
    """
    df['total_price'] = df['product_price'] * df['quantity']
    revenue_per_customer = df.groupby('customer_id')['total_price'].sum()
    return revenue_per_customer.nlargest(top_n)

def main():
    """
    Main function to load data and calculate revenues by month, product, and customer,
    and identify top customers by revenue.
    """
    # Load the data
    file_path = "C:\\Users\\91945\\Desktop\\tanX\\orders.csv"  # Use the actual path to your orders.csv file
    df = load_data(file_path)
    
    if df is not None:
        # Compute total revenue by month
        revenue_by_month = total_revenue_by_month(df)
        print("Total revenue by month:")
        print(revenue_by_month)
        
        # Compute total revenue by product
        revenue_by_product = total_revenue_by_product(df)
        print("\nTotal revenue by product:")
        print(revenue_by_product)
        
        # Compute total revenue by customer
        revenue_by_customer = total_revenue_by_customer(df)
        print("\nTotal revenue by customer:")
        print(revenue_by_customer)
        
        # Identify the top 10 customers by revenue
        top_customers = top_customers_by_revenue(df)
        print("\nTop 10 customers by revenue:")
        print(top_customers)

if __name__ == "__main__":
    main()
